@inject IUpdateQuantityUseCase updateQuantityUseCase
@inject IDeleteProductUseCase deleteProductUseCase

@if (LineItem is not null && LineItem.Product is not null) {
    <li class="row">
        <div class="col">
            <img src="@LineItem.Product.ImageLink" />
        </div>
        <div class="col">
            <h5>@LineItem.Product.Name</h5>
            <div>
                Quantity:&nbsp;&nbsp;
                <input type="number" min="0" value="@LineItem.Quantity" @onchange="HnadleQuantityChange" />
            </div>
            <div>
                Price&nbsp;&nbsp;@LineItem.Product.Price.ToString("c")
            </div>
        </div>
        <div class="col">
            <button class="btn btn-light" @onclick="@(()=>DeleteProduct(LineItem.ProductId))">Delete</button>
        </div>
    </li>
}

@code {
    [Parameter]
    public OrderLineItem LineItem { get; set; }
    [Parameter]
    public EventCallback<Order> OnDeleteProduct { get; set; }
    [Parameter]
    public EventCallback<Order> OnUpdateQuantity { get; set; }
    private async void HnadleQuantityChange(ChangeEventArgs e) {
        //value="@LineItem.Quantity"  is not a two way binding, it's one way binding.
        if (e.Value is null && string.IsNullOrWhiteSpace(e.Value.ToString())) {
            return;
        }
        int qty = 0;
        if (int.TryParse(e.Value.ToString(), out qty)) {
            if (qty < 0) {
                return;
            }
            var order = await updateQuantityUseCase.Execute(LineItem.ProductId,qty);
            await OnUpdateQuantity.InvokeAsync(order);
        }
     
    }
    async void DeleteProduct(int productId) {
        var order = await deleteProductUseCase.Execute(productId);
        await OnDeleteProduct.InvokeAsync(order);
    }
}
